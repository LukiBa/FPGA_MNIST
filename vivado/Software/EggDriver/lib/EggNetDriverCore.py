# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from __future__ import absolute_import, print



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _EggnetDriver
else:
    import _EggnetDriver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def init_network(ip_name: "char const *", network: "network_t *") -> "egg_error_t":
    return _EggnetDriver.init_network(ip_name, network)

def close_network(network: "network_t *") -> "egg_error_t":
    return _EggnetDriver.close_network(network)

def tx_img_thread(network: "void *") -> "void *":
    return _EggnetDriver.tx_img_thread(network)

def rx_img_thread(network: "void *") -> "void *":
    return _EggnetDriver.rx_img_thread(network)

def get_results(results: "pixel_t ***", result_number: "uint32_t *", network: "network_t *") -> "egg_error_t":
    return _EggnetDriver.get_results(results, result_number, network)

def print_err(code: "egg_error_t") -> "char const *":
    return _EggnetDriver.print_err(code)

def print_network(network: "network_t *") -> "egg_error_t":
    return _EggnetDriver.print_network(network)

def read_pixel(pixel: "pixel_t *", network: "network_t *", layer: "uint8_t", row: "uint16_t", col: "uint16_t", channel: "uint8_t") -> "egg_error_t":
    return _EggnetDriver.read_pixel(pixel, network, layer, row, col, channel)

def read_row(pixel: "pixel_t **", network: "network_t *", layer: "uint8_t", row: "uint16_t", channel: "uint8_t") -> "egg_error_t":
    return _EggnetDriver.read_row(pixel, network, layer, row, channel)

def read_channel(pixel: "pixel_t **", network: "network_t *", layer: "uint8_t", channel: "uint8_t") -> "egg_error_t":
    return _EggnetDriver.read_channel(pixel, network, layer, channel)

def read_layer(pixel: "pixel_t ***", network: "network_t *", layer: "uint8_t") -> "egg_error_t":
    return _EggnetDriver.read_layer(pixel, network, layer)


