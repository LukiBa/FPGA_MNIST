name: Python

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macOS-latest]
        os: [ubuntu-latest, macOS-latest]
        python-version: [3.6, 3.7]

    steps:
    - uses: actions/checkout@v1
  
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest tox
    
    - name: Install SWIG (Linux)
      if: runner.os == 'Linux'
      run: |
        # sudo apt-get install swig
        mkdir swig
        cd swig
        wget http://prdownloads.sourceforge.net/swig/swig-4.0.1.tar.gz
        tar -xf swig-4.0.1.tar.gz
        cd swig-4.0.1
        ./configure
        make
        sudo make install
        
    
    - name: Install SWIG (Mac)
      if: runner.os == 'macOS'
      run: brew install swig
    
    - name: Install SWIG (Win)
      if: runner.os == 'Windows'
      run: choco install swig

    - name: Build & Test with Pytest
      if: runner.os != 'Windows'
      run: |
        cd python
        python setup.py build_ext --build-lib .
        python setup.py build
        python setup.py sdist bdist_wheel
        # tox
        pytest
    
    - name: Test with pytest (Windoof)
      if: runner.os == 'Windows'
      run: |
        cd python
        # Use the minigw32 compiler because Microsoft is not able to implement the C standard
        python setup.py build_ext  --global-option --compiler=mingw32 --build-lib .
        python setup.py build
        python setup.py sdist bdist_wheel
        # tox
        # pytest Tensorflow perevents any

    - name: Test Install
      run: |
        cd python
        python setup.py build_ext sdist bdist_wheel
        # Install from setup.py
        pip install .
        # ToDo: Check install from

    - name: Upload Python Package
       uses: actions/upload-artifact@v1
       with:
         name: NeuralNetwork-${{ matrix.arch }}
         path: python/dist/


  package:
      name: Package
      runs-on: ubuntu-latest
      needs: build
      # if: github.event_name == 'release' # run on all events
      steps:
        - name: Download Artifact
          uses: actions/download-artifact@v1
          with:
            name: UTM-arm64
        - name: Upload Release Asset
          uses: actions/upload-release-asset@v1.0.1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: UTM.zip
            asset_name: UTM.ipa
            asset_content_type: application/octet-stream